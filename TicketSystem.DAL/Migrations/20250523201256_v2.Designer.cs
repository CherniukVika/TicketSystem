// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketSystem.DAL;

#nullable disable

namespace TicketSystem.DAL.Migrations
{
    [DbContext(typeof(TicketSystemContext))]
    [Migration("20250523201256_v2")]
    partial class v2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GenrePerformance", b =>
                {
                    b.Property<int>("GenresId")
                        .HasColumnType("int");

                    b.Property<int>("PerformancesId")
                        .HasColumnType("int");

                    b.HasKey("GenresId", "PerformancesId");

                    b.HasIndex("PerformancesId");

                    b.ToTable("PerformanceGenres", (string)null);
                });

            modelBuilder.Entity("TicketSystem.DAL.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("TicketSystem.DAL.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("TicketSystem.DAL.Models.Performance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Performances");
                });

            modelBuilder.Entity("TicketSystem.DAL.Models.PerformanceSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PerformanceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PerformanceId");

                    b.ToTable("PerformanceSchedules");
                });

            modelBuilder.Entity("TicketSystem.DAL.Models.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("PerformanceScheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PerformanceScheduleId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("TicketSystem.DAL.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsReturned")
                        .HasColumnType("bit");

                    b.Property<int>("PerformanceId")
                        .HasColumnType("int");

                    b.Property<int>("PerformanceScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PerformanceId");

                    b.HasIndex("PerformanceScheduleId");

                    b.HasIndex("SeatId")
                        .IsUnique();

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("GenrePerformance", b =>
                {
                    b.HasOne("TicketSystem.DAL.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketSystem.DAL.Models.Performance", null)
                        .WithMany()
                        .HasForeignKey("PerformancesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketSystem.DAL.Models.Performance", b =>
                {
                    b.HasOne("TicketSystem.DAL.Models.Author", "Author")
                        .WithMany("Performances")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("TicketSystem.DAL.Models.PerformanceSchedule", b =>
                {
                    b.HasOne("TicketSystem.DAL.Models.Performance", "Performance")
                        .WithMany("Schedules")
                        .HasForeignKey("PerformanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Performance");
                });

            modelBuilder.Entity("TicketSystem.DAL.Models.Seat", b =>
                {
                    b.HasOne("TicketSystem.DAL.Models.PerformanceSchedule", "PerformanceSchedule")
                        .WithMany("Seats")
                        .HasForeignKey("PerformanceScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PerformanceSchedule");
                });

            modelBuilder.Entity("TicketSystem.DAL.Models.Ticket", b =>
                {
                    b.HasOne("TicketSystem.DAL.Models.Performance", "Performance")
                        .WithMany("Tickets")
                        .HasForeignKey("PerformanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TicketSystem.DAL.Models.PerformanceSchedule", "PerformanceSchedule")
                        .WithMany()
                        .HasForeignKey("PerformanceScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TicketSystem.DAL.Models.Seat", "Seat")
                        .WithOne("Ticket")
                        .HasForeignKey("TicketSystem.DAL.Models.Ticket", "SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Performance");

                    b.Navigation("PerformanceSchedule");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("TicketSystem.DAL.Models.Author", b =>
                {
                    b.Navigation("Performances");
                });

            modelBuilder.Entity("TicketSystem.DAL.Models.Performance", b =>
                {
                    b.Navigation("Schedules");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TicketSystem.DAL.Models.PerformanceSchedule", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("TicketSystem.DAL.Models.Seat", b =>
                {
                    b.Navigation("Ticket")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
